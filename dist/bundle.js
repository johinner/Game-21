(()=>{var e={762:(e,t,r)=>{var n;n=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.puntosJugador=void 0,t.puntosJugador=class{constructor(e,t,r=0,n,o){this.id=e,this.nombre=t,this.puntos=r,this.cartas=n,this.jugadaFinalizada=o}set modificarPuntos(e){this.puntos=this.puntos+e}mostrarDatosJuagador(){return console.log(`${this.nombre} Puntos Totales: ${this.puntos}`)}}}.apply(t,[r,t]),void 0===n||(e.exports=n)},607:function(e,t,r){var n,o,a=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),u=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),d=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&a(t,e,r);return u(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};n=[r,t,r(762),r(443),r(983),r(307),r(403),r(654)],o=function(e,t,r,n,o,a,u,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.btnDisabled=t.id=t.nombre=t.jugadores=t.deck=t.$loader=t.$btnDetener=t.$btnPedir=t.$btnNuevo=t.$buscarRival=t.$vsMaquina=t.d=void 0,a=d(a),u=s(u),t.d=document,t.$vsMaquina=t.d.getElementById("vsMaquina"),t.$buscarRival=t.d.getElementById("buscarRival"),t.$btnNuevo=t.d.getElementById("btnNuevo"),t.$btnPedir=t.d.getElementById("btnPedir"),t.$btnDetener=t.d.getElementById("btnDetener"),t.$loader=t.d.querySelector(".loader"),t.deck=[],t.jugadores=[],t.nombre="",t.id=null;const l=["C","D","H","S"],c=["J","K","Q","A"];t.btnDisabled=e=>{t.$btnPedir.disabled=e,t.$btnDetener.disabled=e,t.$btnNuevo.disabled=e},(()=>{t.nombre=prompt("¿Cómo te llamas?")||"Jugador Local";const e=()=>{t.deck=[],u.default.crearBarajas(l,c)};null===t.$vsMaquina||void 0===t.$vsMaquina||t.$vsMaquina.addEventListener("click",(()=>{e(),(0,i.vsMaquina)()})),t.$buscarRival.addEventListener("click",(async()=>{t.$buscarRival.disabled=!0,t.$loader.style.display="block",t.id=await d("http://localhost:8080/unirse")||"",s(t.nombre,!1);const u=setInterval(p,1e3);setTimeout((()=>{clearInterval(u),t.$loader.style.display="none",(0,t.btnDisabled)(!1),t.jugadores.forEach((e=>{e.id!=t.id&&(0,o.renderBloqueJugador)(e,"grupoRivales")}))}),1e4),e(),t.jugadores.push(new r.puntosJugador(t.id,t.nombre,0,[],!1)),(0,o.renderBloqueJugador)(t.jugadores[0],"localJudador"),t.$btnPedir.addEventListener("click",(()=>{const e=a.pedirCarta();a.acumularPuntos(e,!1),f(e,t.jugadores[0].puntos),(0,n.renderCarta)(e,t.jugadores[0])})),t.$btnDetener.addEventListener("click",(()=>{t.jugadores[0].jugadaFinalizada=!0,(0,t.btnDisabled)(!0),s(t.nombre,!0);const e=setInterval((()=>{const r=t.jugadores.find((e=>!1===e.jugadaFinalizada));p(!0),void 0===r&&(clearInterval(e),t.jugadores.forEach((e=>{e.id!=t.id&&(document.querySelector(`#${e.id} .loader`).style.display="none",e.cartas.forEach((t=>{(0,n.renderCarta)(t,e)})))})),a.determinarGanador())}),1e3)}))}));const d=async e=>{try{const t=await fetch(e);return await t.text()}catch(e){console.error("Ha ocurrido un error: ",e)}},s=(e,r)=>{fetch(`http://localhost:8080/21/${t.id}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({nombre:e,jugadaFinalizada:r})})},f=(e,r)=>{fetch(`http://localhost:8080/21/${t.id}/cartaSelecion`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({carta:e,puntos:r})})},p=async(e=!1)=>{try{const r=await fetch(`http://localhost:8080/21/${t.id}/jugadores`);(await r.json()).forEach((r=>{const n=t.jugadores.findIndex((e=>r.id===e.id));e?(t.jugadores[n].cartas=r.cartas,t.jugadores[n].puntos=r.puntos,t.jugadores[n].jugadaFinalizada=r.jugadaFinalizada):-1===n&&t.jugadores.push(r)}))}catch(e){console.error("Ha ocurrido un error: ",e)}}})()}.apply(t,n),void 0===o||(e.exports=o)},983:(e,t,r)=>{var n,o;n=[r,t,r(607)],o=function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderBloqueJugador=void 0,t.renderBloqueJugador=(e,t)=>{const n=document.querySelector(`.${t}`);let o;const a=document.createElement("div");a.classList.add("row","container","mt-2"),a.setAttribute("id",e.id),a.innerHTML=` \n        <div class="col">\n            <h1>\n                ${e.nombre} <br>\n            </h1>\n            <h5> Puntos Totales: <small>0</small></h5>\n            <div class="divCartas">\n            <div class="loader"></div>\n            </div>\n        </div>\n`,null==n||n.append(a),e.id!=r.id&&(o=document.querySelector(`#${e.id} .loader`),o.style.display="block")}}.apply(t,n),void 0===o||(e.exports=o)},443:(e,t,r)=>{var n,o;n=[r,t,r(919)],o=function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderCarta=void 0,t.renderCarta=(e,t)=>{const n=document.createElement("img");n.src=`assets/img/cartas/${e}.png`,n.classList.add("carta");const o=document.querySelector(`#${t.id} .divCartas`);null==o||o.append(n),(0,r.renderPuntos)(t)}}.apply(t,n),void 0===o||(e.exports=o)},919:(e,t,r)=>{var n;n=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderPuntos=void 0,t.renderPuntos=e=>{const t=document.querySelector(`#${e.id} small`);t&&(t.textContent=e.puntos.toString())}}.apply(t,[r,t]),void 0===n||(e.exports=n)},307:function(e,t,r){var n,o,a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};n=[r,t,r(607),r(762),r(983),r(443),r(403),r(429)],o=function(e,t,r,n,o,u,d,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.determinarGanador=t.turnoComputadora=t.acumularPuntos=t.pedirCarta=void 0,d=a(d),t.pedirCarta=()=>{if(0===r.deck.length)throw"no hay cartas en la baraja";return r.deck.pop()},t.acumularPuntos=(e,t)=>{let n=t?1:0;return r.jugadores[n].puntos=r.jugadores[n].puntos+d.default.valorCartaSeleccionada(e),r.jugadores[n].cartas.push(e),r.jugadores[n]},t.turnoComputadora=e=>{r.jugadores.push(new n.puntosJugador(`id-${(0,s.v4)()}`,"computadora",0,[],!1)),(0,o.renderBloqueJugador)(r.jugadores[1],"grupoRivales");do{const e=(0,t.pedirCarta)();(0,t.acumularPuntos)(e,!0),(0,u.renderCarta)(e,r.jugadores[1])}while(r.jugadores[1].puntos<e&&e<=21)},t.determinarGanador=()=>{let e=0,t={},n=[];return r.jugadores.forEach((r=>{r.puntos>e&&r.puntos<=21&&(e=r.puntos,t=r)})),r.jugadores.forEach((t=>{t.puntos===e&&n.push(t)})),n.length>1?(console.info("Empate:"),console.log(n),{jugadoresEmpatados:n}):(console.info("Jugador Ganador:"),console.log(t),t)}}.apply(t,n),void 0===o||(e.exports=o)},403:(e,t,r)=>{var n,o;n=[r,t,r(607)],o=function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={crearBarajas:(e,t)=>{if(0===r.deck.length){for(let t=2;t<=10;t++)for(let n of e)r.deck.push(t+n);for(let n of e)for(let e of t)r.deck.push(e+n)}return r.deck.sort((function(){return Math.random()-.5}))},valorCartaSeleccionada:e=>{const t=e.substring(0,e.length-1);return isNaN(t)?"A"===t?11:10:1*t}}}.apply(t,n),void 0===o||(e.exports=o)},654:function(e,t,r){var n,o,a=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),u=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),d=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&a(t,e,r);return u(t,e),t};n=[r,t,r(607),r(762),r(983),r(443),r(307),r(429)],o=function(e,t,r,n,o,a,u,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vsMaquina=void 0,u=d(u),t.vsMaquina=()=>{(0,r.btnDisabled)(!1),r.jugadores.push(new n.puntosJugador(`id-${(0,s.v4)()}`,r.nombre,0,[],!1)),(0,o.renderBloqueJugador)(r.jugadores[0],"localJudador"),r.$btnPedir.addEventListener("click",(()=>{const e=u.pedirCarta();u.acumularPuntos(e,!1),(0,a.renderCarta)(e,r.jugadores[0]),r.jugadores[0].puntos>21&&(console.error("Perdiste!! superaste los 21"),(0,r.btnDisabled)(!0),u.turnoComputadora(r.jugadores[0].puntos))})),r.$btnDetener.addEventListener("click",(()=>{(0,r.btnDisabled)(!0),u.turnoComputadora(r.jugadores[0].puntos),u.determinarGanador()})),console.log(r.deck)}}.apply(t,n),void 0===o||(e.exports=o)},429:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return s.default}});var n=f(r(990)),o=f(r(237)),a=f(r(355)),u=f(r(764)),d=f(r(314)),s=f(r(464)),i=f(r(435)),l=f(r(8)),c=f(r(222));function f(e){return e&&e.__esModule?e:{default:e}}},163:(e,t)=>{"use strict";function r(e){return 14+(e+64>>>9<<4)+1}function n(e,t){const r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function o(e,t,r,o,a,u){return n((d=n(n(t,e),n(o,u)))<<(s=a)|d>>>32-s,r);var d,s}function a(e,t,r,n,a,u,d){return o(t&r|~t&n,e,t,a,u,d)}function u(e,t,r,n,a,u,d){return o(t&n|r&~n,e,t,a,u,d)}function d(e,t,r,n,a,u,d){return o(t^r^n,e,t,a,u,d)}function s(e,t,r,n,a,u,d){return o(r^(t|~n),e,t,a,u,d)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let r=0;r<t.length;++r)e[r]=t.charCodeAt(r)}return function(e){const t=[],r=32*e.length,n="0123456789abcdef";for(let o=0;o<r;o+=8){const r=e[o>>5]>>>o%32&255,a=parseInt(n.charAt(r>>>4&15)+n.charAt(15&r),16);t.push(a)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[r(t)-1]=t;let o=1732584193,i=-271733879,l=-1732584194,c=271733878;for(let t=0;t<e.length;t+=16){const r=o,f=i,p=l,v=c;o=a(o,i,l,c,e[t],7,-680876936),c=a(c,o,i,l,e[t+1],12,-389564586),l=a(l,c,o,i,e[t+2],17,606105819),i=a(i,l,c,o,e[t+3],22,-1044525330),o=a(o,i,l,c,e[t+4],7,-176418897),c=a(c,o,i,l,e[t+5],12,1200080426),l=a(l,c,o,i,e[t+6],17,-1473231341),i=a(i,l,c,o,e[t+7],22,-45705983),o=a(o,i,l,c,e[t+8],7,1770035416),c=a(c,o,i,l,e[t+9],12,-1958414417),l=a(l,c,o,i,e[t+10],17,-42063),i=a(i,l,c,o,e[t+11],22,-1990404162),o=a(o,i,l,c,e[t+12],7,1804603682),c=a(c,o,i,l,e[t+13],12,-40341101),l=a(l,c,o,i,e[t+14],17,-1502002290),i=a(i,l,c,o,e[t+15],22,1236535329),o=u(o,i,l,c,e[t+1],5,-165796510),c=u(c,o,i,l,e[t+6],9,-1069501632),l=u(l,c,o,i,e[t+11],14,643717713),i=u(i,l,c,o,e[t],20,-373897302),o=u(o,i,l,c,e[t+5],5,-701558691),c=u(c,o,i,l,e[t+10],9,38016083),l=u(l,c,o,i,e[t+15],14,-660478335),i=u(i,l,c,o,e[t+4],20,-405537848),o=u(o,i,l,c,e[t+9],5,568446438),c=u(c,o,i,l,e[t+14],9,-1019803690),l=u(l,c,o,i,e[t+3],14,-187363961),i=u(i,l,c,o,e[t+8],20,1163531501),o=u(o,i,l,c,e[t+13],5,-1444681467),c=u(c,o,i,l,e[t+2],9,-51403784),l=u(l,c,o,i,e[t+7],14,1735328473),i=u(i,l,c,o,e[t+12],20,-1926607734),o=d(o,i,l,c,e[t+5],4,-378558),c=d(c,o,i,l,e[t+8],11,-2022574463),l=d(l,c,o,i,e[t+11],16,1839030562),i=d(i,l,c,o,e[t+14],23,-35309556),o=d(o,i,l,c,e[t+1],4,-1530992060),c=d(c,o,i,l,e[t+4],11,1272893353),l=d(l,c,o,i,e[t+7],16,-155497632),i=d(i,l,c,o,e[t+10],23,-1094730640),o=d(o,i,l,c,e[t+13],4,681279174),c=d(c,o,i,l,e[t],11,-358537222),l=d(l,c,o,i,e[t+3],16,-722521979),i=d(i,l,c,o,e[t+6],23,76029189),o=d(o,i,l,c,e[t+9],4,-640364487),c=d(c,o,i,l,e[t+12],11,-421815835),l=d(l,c,o,i,e[t+15],16,530742520),i=d(i,l,c,o,e[t+2],23,-995338651),o=s(o,i,l,c,e[t],6,-198630844),c=s(c,o,i,l,e[t+7],10,1126891415),l=s(l,c,o,i,e[t+14],15,-1416354905),i=s(i,l,c,o,e[t+5],21,-57434055),o=s(o,i,l,c,e[t+12],6,1700485571),c=s(c,o,i,l,e[t+3],10,-1894986606),l=s(l,c,o,i,e[t+10],15,-1051523),i=s(i,l,c,o,e[t+1],21,-2054922799),o=s(o,i,l,c,e[t+8],6,1873313359),c=s(c,o,i,l,e[t+15],10,-30611744),l=s(l,c,o,i,e[t+6],15,-1560198380),i=s(i,l,c,o,e[t+13],21,1309151649),o=s(o,i,l,c,e[t+4],6,-145523070),c=s(c,o,i,l,e[t+11],10,-1120210379),l=s(l,c,o,i,e[t+2],15,718787259),i=s(i,l,c,o,e[t+9],21,-343485551),o=n(o,r),i=n(i,f),l=n(l,p),c=n(c,v)}return[o,i,l,c]}(function(e){if(0===e.length)return[];const t=8*e.length,n=new Uint32Array(r(t));for(let r=0;r<t;r+=8)n[r>>5]|=(255&e[r/8])<<r%32;return n}(e),8*e.length))}},790:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};t.default=r},314:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default="00000000-0000-0000-0000-000000000000"},222:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(435))&&n.__esModule?n:{default:n};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");let t;const r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r}},58:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},319:(e,t)=>{"use strict";let r;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!r&&(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!r))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(n)};const n=new Uint8Array(16)},757:(e,t)=>{"use strict";function r(e,t,r,n){switch(e){case 0:return t&r^~t&n;case 1:case 3:return t^r^n;case 2:return t&r^t&n^r&n}}function n(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let r=0;r<t.length;++r)e.push(t.charCodeAt(r))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const a=e.length/4+2,u=Math.ceil(a/16),d=new Array(u);for(let t=0;t<u;++t){const r=new Uint32Array(16);for(let n=0;n<16;++n)r[n]=e[64*t+4*n]<<24|e[64*t+4*n+1]<<16|e[64*t+4*n+2]<<8|e[64*t+4*n+3];d[t]=r}d[u-1][14]=8*(e.length-1)/Math.pow(2,32),d[u-1][14]=Math.floor(d[u-1][14]),d[u-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<u;++e){const a=new Uint32Array(80);for(let t=0;t<16;++t)a[t]=d[e][t];for(let e=16;e<80;++e)a[e]=n(a[e-3]^a[e-8]^a[e-14]^a[e-16],1);let u=o[0],s=o[1],i=o[2],l=o[3],c=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),d=n(u,5)+r(o,s,i,l)+c+t[o]+a[e]>>>0;c=l,l=i,i=n(s,30)>>>0,s=u,u=d}o[0]=o[0]+u>>>0,o[1]=o[1]+s>>>0,o[2]=o[2]+i>>>0,o[3]=o[3]+l>>>0,o[4]=o[4]+c>>>0}return[o[0]>>24&255,o[0]>>16&255,o[0]>>8&255,255&o[0],o[1]>>24&255,o[1]>>16&255,o[1]>>8&255,255&o[1],o[2]>>24&255,o[2]>>16&255,o[2]>>8&255,255&o[2],o[3]>>24&255,o[3]>>16&255,o[3]>>8&255,255&o[3],o[4]>>24&255,o[4]>>16&255,o[4]>>8&255,255&o[4]]}},8:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.unsafeStringify=u;var n,o=(n=r(435))&&n.__esModule?n:{default:n};const a=[];for(let e=0;e<256;++e)a.push((e+256).toString(16).slice(1));function u(e,t=0){return(a[e[t+0]]+a[e[t+1]]+a[e[t+2]]+a[e[t+3]]+"-"+a[e[t+4]]+a[e[t+5]]+"-"+a[e[t+6]]+a[e[t+7]]+"-"+a[e[t+8]]+a[e[t+9]]+"-"+a[e[t+10]]+a[e[t+11]]+a[e[t+12]]+a[e[t+13]]+a[e[t+14]]+a[e[t+15]]).toLowerCase()}t.default=function(e,t=0){const r=u(e,t);if(!(0,o.default)(r))throw TypeError("Stringified UUID is invalid");return r}},990:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(319))&&n.__esModule?n:{default:n},a=r(8);let u,d,s=0,i=0;t.default=function(e,t,r){let n=t&&r||0;const l=t||new Array(16);let c=(e=e||{}).node||u,f=void 0!==e.clockseq?e.clockseq:d;if(null==c||null==f){const t=e.random||(e.rng||o.default)();null==c&&(c=u=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==f&&(f=d=16383&(t[6]<<8|t[7]))}let p=void 0!==e.msecs?e.msecs:Date.now(),v=void 0!==e.nsecs?e.nsecs:i+1;const b=p-s+(v-i)/1e4;if(b<0&&void 0===e.clockseq&&(f=f+1&16383),(b<0||p>s)&&void 0===e.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=p,i=v,d=f,p+=122192928e5;const g=(1e4*(268435455&p)+v)%4294967296;l[n++]=g>>>24&255,l[n++]=g>>>16&255,l[n++]=g>>>8&255,l[n++]=255&g;const y=p/4294967296*1e4&268435455;l[n++]=y>>>8&255,l[n++]=255&y,l[n++]=y>>>24&15|16,l[n++]=y>>>16&255,l[n++]=f>>>8|128,l[n++]=255&f;for(let e=0;e<6;++e)l[n+e]=c[e];return t||(0,a.unsafeStringify)(l)}},237:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=a(r(925)),o=a(r(163));function a(e){return e&&e.__esModule?e:{default:e}}var u=(0,n.default)("v3",48,o.default);t.default=u},925:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0,t.default=function(e,t,r){function n(e,n,u,d){var s;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t}(e)),"string"==typeof n&&(n=(0,a.default)(n)),16!==(null===(s=n)||void 0===s?void 0:s.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let i=new Uint8Array(16+e.length);if(i.set(n),i.set(e,n.length),i=r(i),i[6]=15&i[6]|t,i[8]=63&i[8]|128,u){d=d||0;for(let e=0;e<16;++e)u[d+e]=i[e];return u}return(0,o.unsafeStringify)(i)}try{n.name=e}catch(e){}return n.DNS=u,n.URL=d,n};var n,o=r(8),a=(n=r(222))&&n.__esModule?n:{default:n};const u="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=u;const d="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=d},355:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=u(r(790)),o=u(r(319)),a=r(8);function u(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,r){if(n.default.randomUUID&&!t&&!e)return n.default.randomUUID();const u=(e=e||{}).random||(e.rng||o.default)();if(u[6]=15&u[6]|64,u[8]=63&u[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=u[e];return t}return(0,a.unsafeStringify)(u)}},764:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=a(r(925)),o=a(r(757));function a(e){return e&&e.__esModule?e:{default:e}}var u=(0,n.default)("v5",80,o.default);t.default=u},435:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(58))&&n.__esModule?n:{default:n};t.default=function(e){return"string"==typeof e&&o.default.test(e)}},464:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(435))&&n.__esModule?n:{default:n};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}}},t={};!function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,r),a.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,